{"generatedAt":1715180264535,"generateTime":129,"contents":[{"_path":"/posts/typescript-exclude","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"【Typescript】Exclude 工具类型","description":"Exclude 是 typescript 中内置的工具类型,它用于从一个联合类型中排除掉不希望包含的类型,生成一个新的类型.","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Exclude"}]},{"type":"text","value":" 是 typescript 中内置的工具类型,它用于从一个联合类型中排除掉不希望包含的类型,生成一个新的类型."}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"/**\n * Exclude from T those types that are assignable to U.\n * typescript/lib/lib.es5.d.ts\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\ntype T0 = Exclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">\n// type T0 = \"c\"\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/**\n * Exclude from T those types that are assignable to U.\n * typescript/lib/lib.es5.d.ts\n */\ntype Exclude<T, U> = T extends U ? never : T;\n\ntype T0 = Exclude<\"a\" | \"b\" | \"c\", \"a\" | \"b\">\n// type T0 = \"c\"\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除指定的基本数据类型"},"children":[{"type":"text","value":"排除指定的基本数据类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type MyTypes = string | number | boolean;\ntype StringOrNumber = Exclude<MyTypes, boolean>;\n\nlet uid: StringOrNumber = \"semlinker\" // Ok\nuid = 2024 // Ok\nuid = false // Error\n// Type 'boolean' is not assignable to type 'StringOrNumber'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type MyTypes = string | number | boolean;\ntype StringOrNumber = Exclude<MyTypes, boolean>;\n\nlet uid: StringOrNumber = \"semlinker\" // Ok\nuid = 2024 // Ok\nuid = false // Error\n// Type 'boolean' is not assignable to type 'StringOrNumber'.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除-string-或-number-类型的子类型"},"children":[{"type":"text","value":"排除 string 或 number 类型的子类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type Status = \"success\" | \"error\" | 200 | 500;\n\ntype StringStatus = Exclude<Status, number>;\n// type StringStatus = \"success\" | \"error\"\n\ntype NumberStatus = Exclude<Status, string>\n// type NumberStatus = 200 | 500\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Status = \"success\" | \"error\" | 200 | 500;\n\ntype StringStatus = Exclude<Status, number>;\n// type StringStatus = \"success\" | \"error\"\n\ntype NumberStatus = Exclude<Status, string>\n// type NumberStatus = 200 | 500\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除两个联合类型的共有成员"},"children":[{"type":"text","value":"排除两个联合类型的共有成员"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type TaskStatus = \"Todo\" | \"InProgress\" | \"Done\" | \"Archived\";\ntype ModuleHandledStatus = \"Todo\" | \"Done\" | \"OnHold\";\n\ntype TaskOnlyStatus = Exclude<TaskStatus, ModuleHandledStatus>;\n// type TaskOnlyStatus = \"InProgress\" | \"Archived\"\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type TaskStatus = \"Todo\" | \"InProgress\" | \"Done\" | \"Archived\";\ntype ModuleHandledStatus = \"Todo\" | \"Done\" | \"OnHold\";\n\ntype TaskOnlyStatus = Exclude<TaskStatus, ModuleHandledStatus>;\n// type TaskOnlyStatus = \"InProgress\" | \"Archived\"\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除含有特定属性的子类型"},"children":[{"type":"text","value":"排除含有特定属性的子类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type Animal =\n    | { type: 'dog', legs: number }\n    | { type: 'cat', legs: number }\n    | { type: 'fish', fins: number };\ntype AnimalsWithFins = Exclude<Animal, { legs: number }>;\n\nconst fish: AnimalsWithFins = { type: 'fish', fins: 6 }; // Ok\nconst dog: AnimalsWithFins = { type: 'dog', legs: 4 }; // Error\n// Type '\"dog\"' is not assignable to type '\"fish\"'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Animal =\n    | { type: 'dog', legs: number }\n    | { type: 'cat', legs: number }\n    | { type: 'fish', fins: number };\ntype AnimalsWithFins = Exclude<Animal, { legs: number }>;\n\nconst fish: AnimalsWithFins = { type: 'fish', fins: 6 }; // Ok\nconst dog: AnimalsWithFins = { type: 'dog', legs: 4 }; // Error\n// Type '\"dog\"' is not assignable to type '\"fish\"'.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除同个属性不同类型的子类型"},"children":[{"type":"text","value":"排除同个属性不同类型的子类型"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"除了可以使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Exclude<Animal, { legs: number }>"}]},{"type":"text","value":" 来创建 AnimalsWithFins 类型，该类型还可以通过 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Exclude<Animal, { type: 'dog' | 'cat' }>"}]},{"type":"text","value":" 这种方式来创建。"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type Animal =\n    | { type: 'dog', legs: number }\n    | { type: 'cat', legs: number }\n    | { type: 'fish', fins: number };\n\ntype AnimalsWithFins = Exclude<Animal, { type: 'dog' | 'cat' }>;\n\nconst fish: AnimalsWithFins = { type: 'fish', fins: 6 }; // Ok\nconst dog: AnimalsWithFins = { type: 'dog', legs: 4 }; // Error\n// Type '\"dog\"' is not assignable to type '\"fish\"'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Animal =\n    | { type: 'dog', legs: number }\n    | { type: 'cat', legs: number }\n    | { type: 'fish', fins: number };\n\ntype AnimalsWithFins = Exclude<Animal, { type: 'dog' | 'cat' }>;\n\nconst fish: AnimalsWithFins = { type: 'fish', fins: 6 }; // Ok\nconst dog: AnimalsWithFins = { type: 'dog', legs: 4 }; // Error\n// Type '\"dog\"' is not assignable to type '\"fish\"'.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除枚举类型的某些成员"},"children":[{"type":"text","value":"排除枚举类型的某些成员"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"利用 Exclude 工具类型可以排除枚举中的某些成员，从而得到一个新的类型。"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"enum Status { New, InProgress, Done, Cancelled }\n\ntype ActiveStatus = Exclude<Status, Status.Done | Status.Cancelled>;\n// type ActiveStatus = Status.New | Status.InProgress\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"enum Status { New, InProgress, Done, Cancelled }\n\ntype ActiveStatus = Exclude<Status, Status.Done | Status.Cancelled>;\n// type ActiveStatus = Status.New | Status.InProgress\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除指定前缀的字符串字面量类型"},"children":[{"type":"text","value":"排除指定前缀的字符串字面量类型"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"利用 Exclude 工具类型和模板字面量类型，可以实现从字符串字面量联合类型中，排除指定前缀或后缀的字符串字面量。"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type LogEvent =\n    | \"userLogin\"\n    | \"userLogout\"\n    | \"systemException\"\n    | \"systemCrash\"\n    | \"performanceLoadTime\"\n    | \"performanceApiResponse\";\n\ntype SystemAndPerformanceEvents = Exclude<LogEvent, `user${string}`>;\n// type SystemAndPerformanceEvents = \"systemException\" | \"systemCrash\" | \"performanceLoadTime\" | \"performanceApiResponse\"\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type LogEvent =\n    | \"userLogin\"\n    | \"userLogout\"\n    | \"systemException\"\n    | \"systemCrash\"\n    | \"performanceLoadTime\"\n    | \"performanceApiResponse\";\n\ntype SystemAndPerformanceEvents = Exclude<LogEvent, `user${string}`>;\n// type SystemAndPerformanceEvents = \"systemException\" | \"systemCrash\" | \"performanceLoadTime\" | \"performanceApiResponse\"\n"}]}]},{"type":"element","tag":"h2","props":{"id":"排除不同格式的字符串字面量类型"},"children":[{"type":"text","value":"排除不同格式的字符串字面量类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type LogEvent =\n    | \"userLogin\"\n    | \"userLogout\"\n    | \"UserLogin\" // New\n    | \"UserLogout\" // New\n    | \"systemException\"\n    | \"systemCrash\"\n    | \"performanceLoadTime\"\n    | \"performanceApiResponse\";\n\ntype SystemAndPerformanceEvents = Exclude<LogEvent, `${\"user\" | \"User\"}${string}`>;\n// type SystemAndPerformanceEvents = \"systemException\" | \"systemCrash\" | \"performanceLoadTime\" | \"performanceApiResponse\"\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type LogEvent =\n    | \"userLogin\"\n    | \"userLogout\"\n    | \"UserLogin\" // New\n    | \"UserLogout\" // New\n    | \"systemException\"\n    | \"systemCrash\"\n    | \"performanceLoadTime\"\n    | \"performanceApiResponse\";\n\ntype SystemAndPerformanceEvents = Exclude<LogEvent, `${\"user\" | \"User\"}${string}`>;\n// type SystemAndPerformanceEvents = \"systemException\" | \"systemCrash\" | \"performanceLoadTime\" | \"performanceApiResponse\"\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"排除指定的基本数据类型","depth":2,"text":"排除指定的基本数据类型"},{"id":"排除-string-或-number-类型的子类型","depth":2,"text":"排除 string 或 number 类型的子类型"},{"id":"排除两个联合类型的共有成员","depth":2,"text":"排除两个联合类型的共有成员"},{"id":"排除含有特定属性的子类型","depth":2,"text":"排除含有特定属性的子类型"},{"id":"排除同个属性不同类型的子类型","depth":2,"text":"排除同个属性不同类型的子类型"},{"id":"排除枚举类型的某些成员","depth":2,"text":"排除枚举类型的某些成员"},{"id":"排除指定前缀的字符串字面量类型","depth":2,"text":"排除指定前缀的字符串字面量类型"},{"id":"排除不同格式的字符串字面量类型","depth":2,"text":"排除不同格式的字符串字面量类型"}]}},"_type":"markdown","_id":"content:posts:typescript-exclude.md","_source":"content","_file":"posts/typescript-exclude.md","_extension":"md"},{"_path":"/posts/typescript-extract","_dir":"posts","_draft":false,"_partial":false,"_locale":"","title":"【Typescript】Extract 工具类型","description":"Extract 是 Typescript 中内置的工具类型，用于从类型中提取出指定的属性,生成一个新的类型。这类工具类型在日常开发中非常有用,能够帮助编写类型安全的代码和更好的实现代码复用.","body":{"type":"root","children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Extract 是 Typescript 中内置的工具类型，用于从类型中提取出指定的属性,生成一个新的类型。这类工具类型在日常开发中非常有用,能够帮助编写类型安全的代码和更好的实现代码复用."}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"/**\n * Extract from T those types that are assignable to U.\n * typescript/lib/lib.es5.d.ts\n */\ntype Extract<T, U> = T extends U ? T : never;\n\ntype T0 = Extract<\"a\" | \"b\" | \"c\", \"a\" | \"f\">\n// type T0 = \"a\"\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"/**\n * Extract from T those types that are assignable to U.\n * typescript/lib/lib.es5.d.ts\n */\ntype Extract<T, U> = T extends U ? T : never;\n\ntype T0 = Extract<\"a\" | \"b\" | \"c\", \"a\" | \"f\">\n// type T0 = \"a\"\n"}]}]},{"type":"element","tag":"h2","props":{"id":"提取指定的基本数据类型"},"children":[{"type":"text","value":"提取指定的基本数据类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type MyTypes = string | number | boolean;\ntype StringOrNumber = Extract<MyTypes, string | number>;\n\nlet uid: StringOrNumber = \"semlinker\" // Ok\nuid = 2024 // Ok\nuid = false // Error\n// Type 'boolean' is not assignable to type 'StringOrNumber'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type MyTypes = string | number | boolean;\ntype StringOrNumber = Extract<MyTypes, string | number>;\n\nlet uid: StringOrNumber = \"semlinker\" // Ok\nuid = 2024 // Ok\nuid = false // Error\n// Type 'boolean' is not assignable to type 'StringOrNumber'.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"提取指定的字符串字面量类型"},"children":[{"type":"text","value":"提取指定的字符串字面量类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type Color = 'red' | 'green' | 'blue' | 'yellow';\ntype PrimaryColors = Extract<Color, 'red' | 'green' | 'blue'>;\n\nconst primaryColor: PrimaryColors = 'blue'; // Ok\nconst secondaryColor: PrimaryColors = 'yellow'; // Error\n// Type '\"yellow\"' is not assignable to type 'PrimaryColors'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Color = 'red' | 'green' | 'blue' | 'yellow';\ntype PrimaryColors = Extract<Color, 'red' | 'green' | 'blue'>;\n\nconst primaryColor: PrimaryColors = 'blue'; // Ok\nconst secondaryColor: PrimaryColors = 'yellow'; // Error\n// Type '\"yellow\"' is not assignable to type 'PrimaryColors'.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"提取可调用的函数类型"},"children":[{"type":"text","value":"提取可调用的函数类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type Value = string | number | (() => void);\ntype CallableFn = Extract<Value, Function>;\n\nconst fn1: CallableFn = () => console.log('semlinker'); // Ok\nconst fn2: CallableFn = 'semlinker'; // Error\n// Type 'string' is not assignable to type '() => void'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Value = string | number | (() => void);\ntype CallableFn = Extract<Value, Function>;\n\nconst fn1: CallableFn = () => console.log('semlinker'); // Ok\nconst fn2: CallableFn = 'semlinker'; // Error\n// Type 'string' is not assignable to type '() => void'.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"提取两个联合类型的共有成员"},"children":[{"type":"text","value":"提取两个联合类型的共有成员"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type TaskStatus = 'Todo' | 'InProgress' | 'Done' | 'Archived';\ntype ModuleHandledStatus = 'Todo' | 'Done' | 'OnHold';\n\ntype ModuleSpecificStatus = Extract<TaskStatus, ModuleHandledStatus>;\n// type ModuleSpecificStatus = \"Todo\" | \"Done\"\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type TaskStatus = 'Todo' | 'InProgress' | 'Done' | 'Archived';\ntype ModuleHandledStatus = 'Todo' | 'Done' | 'OnHold';\n\ntype ModuleSpecificStatus = Extract<TaskStatus, ModuleHandledStatus>;\n// type ModuleSpecificStatus = \"Todo\" | \"Done\"\n"}]}]},{"type":"element","tag":"h2","props":{"id":"提取含有特定属性的子类型"},"children":[{"type":"text","value":"提取含有特定属性的子类型"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Animal"}]},{"type":"text","value":"联合类型,包含了多种动物的描述对象,想从中提取出含有\"legs\"属性的子类型."}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type Animal =\n  | { type: 'dog', legs: number }\n  | { type: 'cat', legs: number }\n  | { type: 'fish', fins: number };\n\ntype AnimalsWithLegs = Extract<Animal, { legs: number }>;\n\nconst dog: AnimalsWithLegs = { type: 'dog', legs: 4 }; // Ok\nconst cat: AnimalsWithLegs = { type: 'cat', legs: 4 }; // Ok\nconst fish: AnimalsWithLegs = { type: 'fish', fins: 6 }; // Error\n// Type '\"fish\"' is not assignable to type '\"dog\" | \"cat\"'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Animal =\n  | { type: 'dog', legs: number }\n  | { type: 'cat', legs: number }\n  | { type: 'fish', fins: number };\n\ntype AnimalsWithLegs = Extract<Animal, { legs: number }>;\n\nconst dog: AnimalsWithLegs = { type: 'dog', legs: 4 }; // Ok\nconst cat: AnimalsWithLegs = { type: 'cat', legs: 4 }; // Ok\nconst fish: AnimalsWithLegs = { type: 'fish', fins: 6 }; // Error\n// Type '\"fish\"' is not assignable to type '\"dog\" | \"cat\"'.\n"}]}]},{"type":"element","tag":"h2","props":{"id":"提取特定的事件类型"},"children":[{"type":"text","value":"提取特定的事件类型"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type EventTypes = MouseEvent | KeyboardEvent | TouchEvent;\n\ntype OnlyMouseEvents = Extract<EventTypes, MouseEvent>;\n\nfunction handleMouseEvent(event: OnlyMouseEvents) {\n  console.log('Handling mouse event:', event.clientX, event.clientY);\n}\n\ndocument.addEventListener('click', (event) => {\n  handleMouseEvent(event); // OK\n});\n\ndocument.addEventListener('keydown', (event) => {\n  handleMouseEvent(event); // Error\n  // Argument of type 'KeyboardEvent' is not assignable to parameter of type 'MouseEvent'.\n});\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type EventTypes = MouseEvent | KeyboardEvent | TouchEvent;\n\ntype OnlyMouseEvents = Extract<EventTypes, MouseEvent>;\n\nfunction handleMouseEvent(event: OnlyMouseEvents) {\n  console.log('Handling mouse event:', event.clientX, event.clientY);\n}\n\ndocument.addEventListener('click', (event) => {\n  handleMouseEvent(event); // OK\n});\n\ndocument.addEventListener('keydown', (event) => {\n  handleMouseEvent(event); // Error\n  // Argument of type 'KeyboardEvent' is not assignable to parameter of type 'MouseEvent'.\n});\n"}]}]},{"type":"element","tag":"h2","props":{"id":"在类型守卫中使用-extract"},"children":[{"type":"text","value":"在类型守卫中使用 Extract"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Extract"}]},{"type":"text","value":" 可以在类型守卫中精确地过滤类型，使得在条件分支中可以安全地使用过滤后的类型。"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type Pet = { type: 'dog', bark: () => void } | { type: 'cat', meow: () => void };\n\nfunction isDog(pet: Pet): pet is Extract<Pet, { type: 'dog' }> {\n  return pet.type === 'dog';\n}\n\nconst pet1: Pet = { type: 'dog', bark: () => console.log('Woof!') }\nconst pet2: Pet = { type: \"cat\", meow: () => console.log(\"Meow!\") }\nconsole.log(`pet1 is dog: ${isDog(pet1)}`) // \"pet1 is dog: true\"\nconsole.log(`pet2 is dog: ${isDog(pet2)}`) // \"pet2 is dog: false\"\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type Pet = { type: 'dog', bark: () => void } | { type: 'cat', meow: () => void };\n\nfunction isDog(pet: Pet): pet is Extract<Pet, { type: 'dog' }> {\n  return pet.type === 'dog';\n}\n\nconst pet1: Pet = { type: 'dog', bark: () => console.log('Woof!') }\nconst pet2: Pet = { type: \"cat\", meow: () => console.log(\"Meow!\") }\nconsole.log(`pet1 is dog: ${isDog(pet1)}`) // \"pet1 is dog: true\"\nconsole.log(`pet2 is dog: ${isDog(pet2)}`) // \"pet2 is dog: false\"\n"}]}]},{"type":"element","tag":"h2","props":{"id":"在函数重载中使用-extract"},"children":[{"type":"text","value":"在函数重载中使用 Extract"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在处理 API 请求的场景中,需要根据不同的请求类型(如 GET、POST、DELETE)处理不同类型的数据。为了增强类型安全和确保每种请求类型都正确地处理其数据，可以利用 TypeScript 的函数重载和 Extract 工具类型。"}]},{"type":"element","tag":"pre","props":{"className":["language-typescript"],"code":"type RequestType = 'GET' | 'POST' | 'DELETE';\ntype RequestData = {\n  GET: undefined;\n  POST: { body: string };\n  DELETE: { resourceId: number };\n};\n\n// Function overloading, based on the request type, accepts matching data types\nfunction sendRequest<T extends RequestType>(type: 'GET', data: Extract<RequestData[T], undefined>): void;\nfunction sendRequest<T extends RequestType>(type: 'POST', data: Extract<RequestData[T], { body: string }>): void;\nfunction sendRequest<T extends RequestType>(type: 'DELETE', data: Extract<RequestData[T], { resourceId: number }>): void;\nfunction sendRequest<T extends RequestType>(type: T, data: RequestData[T]): void {\n  console.log(`Sending ${type} request with data:`, data)\n}\n\nsendRequest('GET', undefined) // Ok\nsendRequest('POST', { body: 'semlinker' }) // Ok\nsendRequest('DELETE', { resourceId: 2024 }) // Ok\n\nsendRequest('POST', { body: 2024 }) // Error\n// Type 'number' is not assignable to type 'string'.\nsendRequest('DELETE', undefined) // Error\n// Argument of type 'undefined' is not assignable to parameter of type '{ resourceId: number; }'.\n","language":"typescript","meta":""},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"type RequestType = 'GET' | 'POST' | 'DELETE';\ntype RequestData = {\n  GET: undefined;\n  POST: { body: string };\n  DELETE: { resourceId: number };\n};\n\n// Function overloading, based on the request type, accepts matching data types\nfunction sendRequest<T extends RequestType>(type: 'GET', data: Extract<RequestData[T], undefined>): void;\nfunction sendRequest<T extends RequestType>(type: 'POST', data: Extract<RequestData[T], { body: string }>): void;\nfunction sendRequest<T extends RequestType>(type: 'DELETE', data: Extract<RequestData[T], { resourceId: number }>): void;\nfunction sendRequest<T extends RequestType>(type: T, data: RequestData[T]): void {\n  console.log(`Sending ${type} request with data:`, data)\n}\n\nsendRequest('GET', undefined) // Ok\nsendRequest('POST', { body: 'semlinker' }) // Ok\nsendRequest('DELETE', { resourceId: 2024 }) // Ok\n\nsendRequest('POST', { body: 2024 }) // Error\n// Type 'number' is not assignable to type 'string'.\nsendRequest('DELETE', undefined) // Error\n// Argument of type 'undefined' is not assignable to parameter of type '{ resourceId: number; }'.\n"}]}]}],"toc":{"title":"","searchDepth":2,"depth":2,"links":[{"id":"提取指定的基本数据类型","depth":2,"text":"提取指定的基本数据类型"},{"id":"提取指定的字符串字面量类型","depth":2,"text":"提取指定的字符串字面量类型"},{"id":"提取可调用的函数类型","depth":2,"text":"提取可调用的函数类型"},{"id":"提取两个联合类型的共有成员","depth":2,"text":"提取两个联合类型的共有成员"},{"id":"提取含有特定属性的子类型","depth":2,"text":"提取含有特定属性的子类型"},{"id":"提取特定的事件类型","depth":2,"text":"提取特定的事件类型"},{"id":"在类型守卫中使用-extract","depth":2,"text":"在类型守卫中使用 Extract"},{"id":"在函数重载中使用-extract","depth":2,"text":"在函数重载中使用 Extract"}]}},"_type":"markdown","_id":"content:posts:typescript-extract.md","_source":"content","_file":"posts/typescript-extract.md","_extension":"md"}],"navigation":[{"title":"Posts","_path":"/posts","children":[{"title":"【Typescript】Exclude 工具类型","_path":"/posts/typescript-exclude"},{"title":"【Typescript】Extract 工具类型","_path":"/posts/typescript-extract"}]}]}